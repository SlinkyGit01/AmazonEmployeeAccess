
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(tidyverse)
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.3     ✔ readr     2.1.4
✔ forcats   1.0.0     ✔ stringr   1.5.0
✔ ggplot2   3.4.3     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.0
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
> library(tidymodels)
── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──
✔ broom        1.0.5     ✔ rsample      1.2.0
✔ dials        1.2.0     ✔ tune         1.1.2
✔ infer        1.0.5     ✔ workflows    1.1.3
✔ modeldata    1.2.0     ✔ workflowsets 1.0.1
✔ parsnip      1.1.1     ✔ yardstick    1.2.0
✔ recipes      1.0.8     
── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ scales::discard() masks purrr::discard()
✖ dplyr::filter()   masks stats::filter()
✖ recipes::fixed()  masks stringr::fixed()
✖ dplyr::lag()      masks stats::lag()
✖ yardstick::spec() masks readr::spec()
✖ recipes::step()   masks stats::step()
• Learn how to get started at https://www.tidymodels.org/start/
> library(embed)
> library(vroom)

Attaching package: ‘vroom’

The following object is masked from ‘package:yardstick’:

    spec

The following object is masked from ‘package:scales’:

    col_factor

The following objects are masked from ‘package:readr’:

    as.col_spec, col_character, col_date, col_datetime, col_double,
    col_factor, col_guess, col_integer, col_logical, col_number,
    col_skip, col_time, cols, cols_condense, cols_only, date_names,
    date_names_lang, date_names_langs, default_locale, fwf_cols,
    fwf_empty, fwf_positions, fwf_widths, locale, output_column,
    problems, spec

> 
> ## Change working directory
> 
> #setwd(dir = "~/School/F2023/STAT348/STAT348/AmazonEmployeeAccess")
> 
> 
> 
> ########################## EDA ################################################
> 
> 
> 
> at <- vroom("train.csv") %>% 
+   mutate(ACTION = as.factor(ACTION))
Rows: 32769 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): ACTION, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTN...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> atest <- vroom("test.csv")
Rows: 58921 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): id, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTNAME,...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> my_recipe <- recipe(ACTION ~ ., data=at) %>%
+   step_mutate_at(all_numeric_predictors(), fn = factor) %>% 
+ # turn all numeric features into factors
+   step_other(all_nominal_predictors(), threshold = .01) %>% 
+ # combines categorical values that occur <5% into an "other" value
+   step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
+   step_lencode_mixed(all_nominal_predictors(), outcome = vars(target_var)) 
> #target encoding
> # also step_lencode_glm() and step_lencode_bayes()
> 
> 
> # NOTE: some of these step functions are not appropriate to use together
> 
> # apply the recipe to your data
> prep <- prep(my_recipe)
> baked <- bake(prep, new_data = at)
> 
> #ggplot(data=baked) + geom_mosaic(aes(x=baked$MGR_ID_other, fill=ACTION))
> 
> 
> 
> ############################## Logistic Regression #############################
> 
> 
> 
> my_mod_l <- logistic_reg() %>% #Type of model
+   set_engine("glm")
> 
> amazon_workflow <- workflow() %>%
+ add_recipe(my_recipe) %>%
+ add_model(my_mod_l) %>%
+ fit(data = at) # Fit the workflow
> 
> amazon_predictions <- predict(amazon_workflow,
+                               new_data=atest,
+                               type="prob") # "class" or "prob" (see doc)
Warning message:
In predict.lm(object, newdata, se.fit, scale = 1, type = if (type ==  :
  prediction from rank-deficient fit; attr(*, "non-estim") has doubtful cases
> 
> amazon_predictions <- amazon_predictions %>%
+   mutate(Action = ifelse(.pred_1 >= 0.7, 1, 0))
> 
> amazon_predictions <- amazon_predictions %>% #This predicts
+   bind_cols(., atest) %>% #Bind predictions with test data
+   select(id, .pred_1) %>% #Just keep datetime and predictions
+   rename(Action=.pred_1)
> 
> vroom_write(x=amazon_predictions, file="logistic.csv", delim=",")
> 
> 
> 
> ######################## Penalized Logistic Regression ########################
> 
> 
> 
> my_recipe <- recipe(ACTION ~ ., data=at) %>%
+   step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
+   step_other(all_nominal_predictors(), threshold = .001) %>% 
+   step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION))
> 
> my_mod_pl <- logistic_reg(mixture=tune(), penalty=tune()) %>% #Type of model
+   set_engine("glmnet")
> 
> amazon_workflow <- workflow() %>%
+   add_recipe(my_recipe) %>%
+   add_model(my_mod_pl)
> 
> ## Grid of values to tune over
> tuning_grid <- grid_regular(penalty(),
+                             mixture(),
+                             levels = 5) ## L^2 total tuning possibilities
> 
> ## Split data for CV
> folds <- vfold_cv(at, v = 5, repeats=1)
> 
> ## Run the CV
> CV_results <- amazon_workflow %>%
+ tune_grid(resamples=folds,
+           grid=tuning_grid,
+           metrics=metric_set(roc_auc)) #Or leave metrics NULL
> 
> # Find Best Tuning Parameters1
> best_tune_pl <- CV_results %>%
+                 select_best("roc_auc")
> 
> ## Finalize the Workflow & fit it
> final_wf <- amazon_workflow %>%
+             finalize_workflow(best_tune_pl) %>%
+             fit(data=at)
> 
> ## Predict
> 
> amazon_predictions_pl <- final_wf %>% predict(new_data=atest,
+                               type="prob")
> 
> amazon_predictions_pl <- amazon_predictions_pl %>% #This predicts
+   bind_cols(., atest) %>% #Bind predictions with test data
+   select(id, .pred_1) %>% #Just keep datetime and predictions
+   rename(Action=.pred_1)
> 
> vroom_write(x=amazon_predictions_pl, file="Plogistic.csv", delim=",")
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> proc.time()
   user  system elapsed 
277.262   3.117 131.688 
